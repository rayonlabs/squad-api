- name: Setup Kubernetes Node
  hosts: all
  become: yes
  any_errors_fatal: true
  vars:
    username: "{{ user }}"
    ssh_public_keys: "{{ ssh_keys }}"
    microk8s_channel: "1.31/stable"

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Gather package facts
      package_facts:
        manager: auto

    - name: Stop and disable unattended upgrades
      systemd:
        name: unattended-upgrades
        state: stopped
        enabled: no

    - name: Create user
      user:
        name: "{{ username }}"
        shell: /bin/bash
        create_home: yes
        state: present

    - name: Create SSH directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0700'
      with_items:
        - "/home/{{ username }}/.ssh"
        - "/root/.ssh"

    - name: Add authorized SSH keys
      authorized_key:
        user: "{{ user }}"
        state: present
        key: "{{ item }}"
      with_items: "{{ ssh_public_keys }}"
      become: yes

    - name: Set correct ownership for user home
      file:
        path: "/home/{{ username }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        recurse: yes

    - name: Add user to sudoers
      lineinfile:
        path: /etc/sudoers
        line: '{{ username }} ALL=(ALL) NOPASSWD:ALL'
        validate: 'visudo -cf %s'

    - name: Remove old containerd if exists
      apt:
        name: containerd.io
        state: absent

    - name: Remove unwanted files in sources.list.d
      find:
        paths: /etc/apt/sources.list.d
        patterns:
          - "*"
        excludes:
          - "cuda-*.list"
          - "deadsnakes.list"
          - "docker.list"
          - "nvidia-docker-container.list"
          - "ubuntu.sources"
        file_type: file
      register: apt_files_to_remove

    - name: Delete found files
      file:
        path: "{{ item.path }}"
        state: absent
      with_items: "{{ apt_files_to_remove.files }}"

    - name: Remove proxy configuration files
      file:
        path: "{{ item }}"
        state: absent
      with_fileglob:
        - "/etc/apt/apt.conf.d/*proxy*"

    - name: Remove proxy settings from apt.conf
      lineinfile:
        path: /etc/apt/apt.conf
        regexp: "{{ item }}"
        state: absent
      with_items:
        - 'Acquire::http::Proxy'
        - 'Acquire::https::Proxy'
      when: ansible_path_apt_conf.stat.exists is defined and ansible_path_apt_conf.stat.exists

    - name: Unset all snap proxy settings
      command: snap unset system {{ item }}
      loop:
        - proxy.http
        - proxy.https
        - proxy.no-proxy
      changed_when: true
      ignore_errors: true

    - name: Install basic system prerequisites
      apt:
        name:
          - vim
          - jq
          - bc
          - libclang-dev
          - npm
          - clang
          - libssl-dev
          - llvm
          - libudev1
          - protobuf-compiler
          - python3
          - python3-pip
          - python3-venv
          - docker.io
          - docker-compose
          - build-essential
          - nginx
          - redis
          - net-tools
          - ffmpeg
          - rsyslog
          - libpq-dev
          - snapd
          - iputils-ping
          - systemd-timesyncd
        state: present

    - name: Set vim as default editor
      alternatives:
        name: editor
        path: /usr/bin/vim
        priority: 1

    - name: Get list of installed lambda packages
      shell: dpkg --list | grep lambda | awk '{print $2}'
      register: lambda_packages
      changed_when: false

    - name: Check if lambda version file exists
      stat:
        path: /etc/lambda-version
      register: lambda_version_file

    - name: Check if another lambda package file exists, backup
      stat:
        path: /etc/systemd/system/lambda-jupyter.service
      register: lambda_file_backup

    - name: Remove lambda packages
      apt:
        name: "{{ lambda_packages.stdout_lines }}"
        state: absent
        purge: yes
      when:
        - lambda_version_file.stat.exists or lambda_file_backup.stat.exists
        - lambda_packages.stdout_lines | length > 0

    - name: Configure file limits
      blockinfile:
        path: /etc/security/limits.conf
        block: |
          * soft nofile 40000
          * hard nofile 40001

    - name: Configure PAM limits
      lineinfile:
        path: "{{ item }}"
        line: "session required pam_limits.so"
      with_items:
        - /etc/pam.d/common-session
        - /etc/pam.d/common-session-noninteractive

    - name: Set hostname
      hostname:
        name: "{{ inventory_hostname }}"
        use: systemd

    - name: Update /etc/hostname
      copy:
        content: "{{ inventory_hostname }}"
        dest: /etc/hostname

    - name: Ensure preserve_hostname is set to true
      lineinfile:
        path: /etc/cloud/cloud.cfg
        regexp: '^preserve_hostname:'
        line: 'preserve_hostname: true'
        create: true
        owner: root
        group: root
        mode: '0644'

    - name: Create hostname script
      copy:
        dest: /usr/local/bin/set-hostname.sh
        mode: '0755'
        content: |
          #!/bin/bash
          hostnamectl set-hostname "{{ inventory_hostname }}"
          hostname "{{ inventory_hostname }}"
          echo -n "{{ inventory_hostname }}" > /etc/hostname

    - name: Create systemd service
      copy:
        dest: /etc/systemd/system/set-hostname.service
        content: |
          [Unit]
          Description=Set system hostname on boot
          After=network.target

          [Service]
          Type=oneshot
          ExecStart=/usr/local/bin/set-hostname.sh
          RemainAfterExit=yes

          [Install]
          WantedBy=multi-user.target

    - name: Enable and start hostname service
      systemd:
        name: set-hostname
        enabled: yes
        state: started
        daemon_reload: yes

    - name: Configure and ensure time synchronization
      block:
        - name: Ensure timesyncd is installed and enabled
          systemd:
            name: systemd-timesyncd
            state: started
            enabled: yes

        - name: Configure NTP servers
          lineinfile:
            path: /etc/systemd/timesyncd.conf
            regexp: '^#?NTP='
            line: 'NTP=pool.ntp.org'

        - name: Force time synchronization
          shell: |
            timedatectl set-ntp true
            systemctl restart systemd-timesyncd

    - name: Disable IPv6
      block:
        - name: Set sysctl parameters for IPv6
          sysctl:
            name: "{{ item.key }}"
            value: "{{ item.value }}"
            state: present
            sysctl_file: /etc/sysctl.d/99-disable-ipv6.conf
            reload: yes
          with_items:
            - { key: "net.ipv6.conf.all.disable_ipv6", value: "1" }
            - { key: "net.ipv6.conf.default.disable_ipv6", value: "1" }
            - { key: "net.ipv6.conf.lo.disable_ipv6", value: "1" }
          register: ipv6_disabled
      become: yes

    - name: Install MicroK8s
      community.general.snap:
        name: microk8s
        channel: "{{ microk8s_channel }}"
        classic: yes

    - name: Start MicroK8s
      shell: microk8s status | grep "microk8s is running" || microk8s start
      changed_when: false

    - name: Configure IP for k8s comms
      block:
        - name: Get current kubelet args
          slurp:
            src: /var/snap/microk8s/current/args/kubelet
          register: kubelet_args

        - name: Check if node-ip is already configured
          set_fact:
            has_node_ip: "{{ (kubelet_args.content | b64decode) is regex('--node-ip=') }}"

        - name: Add node-ip to kubelet args
          lineinfile:
            path: /var/snap/microk8s/current/args/kubelet
            line: "--node-ip={{ internal_ip }}"
            create: yes
          when: not has_node_ip
          register: kubelet_modified

        - name: Restart kubelet if config changed
          systemd:
            name: snap.microk8s.daemon-kubelite
            state: restarted
          when: kubelet_modified.changed

    - name: Setup Kubernetes access for user
      block:
        - name: Add user to microk8s group
          user:
            name: "{{ item }}"
            groups: microk8s
            append: yes
          with_items:
            - "{{ username }}"
            - "{{ ansible_user }}"

        - name: Ensure .kube directory exists for user
          file:
            path: "/home/{{ username }}/.kube"
            state: directory
            mode: '0755'
            owner: "{{ username }}"
            group: "{{ username }}"

        - name: Generate kubeconfig from microk8s
          shell: microk8s config > /home/{{ username }}/.kube/config
          args:
            creates: "/home/{{ username }}/.kube/config"

        - name: Set kubeconfig permissions
          file:
            path: "/home/{{ username }}/.kube/config"
            mode: '0600'
            owner: "{{ username }}"
            group: "{{ username }}"

    - name: Update DNS resolution config
      template:
        src: resolved.conf.j2
        dest: "/etc/systemd/resolved.conf"
        mode: '0644'

    - name: Restart systemd-resolved
      systemd:
        name: systemd-resolved
        state: restarted

    - name: Reboot
      reboot:
        msg: "Rebooting..."
        reboot_command: "reboot"
        connect_timeout: 5
        reboot_timeout: 900
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      when: ipv6_disabled.changed
      register: rebooted

    - name: Wait for system to be ready
      wait_for_connection:
        timeout: 600
      when: rebooted.changed

    - name: Set hostname again just in case
      systemd:
        name: set-hostname
        enabled: yes
        state: restarted
        daemon_reload: yes
      when: rebooted.changed

    - name: Wait for microk8s to be ready
      shell: microk8s status | grep -E "microk8s is running|acting as a node in a cluster"
      register: result
      until: result.rc == 0
      retries: 30
      delay: 10
      ignore_errors: yes
      when: rebooted.changed

    - name: Enable IP forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        sysctl_set: yes
        reload: yes
